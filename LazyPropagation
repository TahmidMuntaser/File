#define MAX 400010


long long segSum[MAX], lazy[MAX];

void update(int node, long long start, long long end, long long l, long long r, long long value) {
    int leftSide  = node * 2;

    int rightSide = (node * 2) + 1;


    if (lazy[node]) {

        segSum[node] += ((end - start + 1) * lazy[node]);

        if (start != end) {
            lazy[leftSide]  += lazy[node];
            lazy[rightSide] += lazy[node];
        } 

        lazy[node] = 0;
    }

    if (start > r || end < l) {
        return;
    }


    if (start >= l && end <= r) {

        segSum[node] += ((end - start + 1) * value);

        if (start != end) {
            lazy[leftSide]  += value;
            lazy[rightSide] += value;
        }

        return;

    }


    int mid = (start + end) >> 1;

    update(leftSide, start, mid, l, r, value);

    update(rightSide, mid + 1, end, l, r, value);

    segSum[node] = segSum[leftSide] + segSum[rightSide];


}


long long query(int node, long long start, long long end, long long l, long long r) {
    
    
    int leftSide  = node * 2;
    int rightSide = (node * 2) + 1;


    if (lazy[node]) {
        segSum[node] += ((end - start + 1) * lazy[node]);
        if (start != end) {
            lazy[leftSide]  += lazy[node];
            lazy[rightSide] += lazy[node];
        } 
        lazy[node] = 0;
    }


    if (start > r || end < l) {
        return 0;
    }

    if (l <= start && end <= r) {
        return segSum[node];
    }

    int mid = (start + end) >> 1;

    long long q1  = query(leftSide, start, mid, l, r);
    long long q2 = query(rightSide, mid + 1, end, l, r);


    return q1 + q2;   
}



int main(){
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);

    
    t{

        in;
        ll q;
        cin >> q;

       for (int i = 0; i < MAX; i++) {
            segSum[i] = 0;
            lazy[i] = 0;
        }

        while(q--){
            // ll type;
            // cin >> type;

            // if(type == 0){
                ll x, y, v;
                cin >> x >> y >> v;

                update(1, 0, n-1, x, y, v);
            // }
        }

        ll z;
        cin>>z;

        while (z--)
        {
            ll r;
            cin>>r;

            cout << query(1, 0, n-1, r, r) << "\n";
        }
        
        
    }
   
  

    return 0;
}
